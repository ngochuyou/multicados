/**
 * 
 */
package multicados.internal.domain.validation;

import java.io.Serializable;
import java.util.List;

import javax.persistence.EntityExistsException;
import javax.persistence.EntityManager;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.PersistenceException;

import org.hibernate.SharedSessionContract;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import multicados.internal.domain.AbstractGraphLogicsFactory;
import multicados.internal.domain.DomainResource;
import multicados.internal.domain.DomainResourceContext;
import multicados.internal.domain.IdentifiableResource;
import multicados.internal.domain.metadata.IdentifiableResourceMetadata;
import multicados.internal.domain.repository.GenericRepository;
import multicados.internal.helper.Common;
import multicados.internal.helper.SpecificationHelper;

/**
 * Do an existence check for any non-auto-generated-identifier
 * {@link DomainResource}.
 * <p>
 * Notice: This check may also complete with a success status in case the
 * {@link Inheritance} applied to the resource is
 * {@link InheritanceType#JOINED}.
 * </p>
 * 
 * @author Ngoc Huy
 *
 */
class IdentifiableResourceValidator extends AbstractDomainResourceValidator<IdentifiableResource<?>>
		implements AbstractGraphLogicsFactory.FixedLogic {

	private static final Logger logger = LoggerFactory.getLogger(IdentifiableResourceValidator.class);

	private final DomainResourceContext resourceContext;
	private final GenericRepository genericRepository;

	public IdentifiableResourceValidator(DomainResourceContext resourceContext, GenericRepository genericRepository) {
		this.resourceContext = resourceContext;
		this.genericRepository = genericRepository;
	}

	@Override
	public Validation isSatisfiedBy(EntityManager entityManager, IdentifiableResource<?> resource) throws Exception {
		return isSatisfiedBy(entityManager, resource.getId(), resource);
	}

	@SuppressWarnings({ "unchecked" })
	@Override
	public Validation isSatisfiedBy(EntityManager entityManager, Serializable id, IdentifiableResource<?> resource)
			throws Exception {
		final Class<IdentifiableResource<?>> resourceType = (Class<IdentifiableResource<?>>) resource.getClass();
		// EntityManager compatibility check
		if (!(entityManager instanceof SharedSessionContract)) {
			if (logger.isWarnEnabled()) {
				logger.warn(
						"Unable to do a identity check on resource type {} since the {} of type {} was incompatible. Skipping identity check using success status",
						resourceType.getName(), EntityManager.class.getSimpleName(),
						entityManager.getClass().getName());
			}

			return Validation.success();
		}
		// if this resource'id is auto-generated, we skip
		if (resourceContext.getMetadata(resourceType).unwrap(IdentifiableResourceMetadata.class)
				.isIdentifierAutoGenerated()) {
			return Validation.success();
		}

		final SharedSessionContract session = (SharedSessionContract) entityManager;

		if (genericRepository.count(resourceType, SpecificationHelper.hasId(resourceType, id, session), session) != 0) {
			throw new PersistenceException(new EntityExistsException(Common.existed(List.of(id.toString()))));
		}

		return Validation.success();
	}

}
